#!/bin/bash

#-----------------------------------
# Pre-Commit Hook
#-----------------------------------
has_error=0
wd=$(pwd)
gitd=$(git rev-parse --show-toplevel)

#-----------------------------------
# Evaluate the go.mod file 
#-----------------------------------
cd $gitd
find . -type f -name go.mod | while read fname; do 
	DIR=$(dirname $fname)
	cd $DIR
	go mod tidy
	git add go.mod	
	
	# check for the existence of a go.sum file
	if [ -f "go.sum" ]; then
		git add go.sum
	fi

	# Determine if there is a replace directive in the go.mod file
	rep=$(grep -n replace go.mod)
	if [ $? -ne 1 ]; then
		echo "remove replace directive from $fname"
		echo " " $rep
		has_error=1
	fi

	cd $gitd
done
cd $wd

# excludes protobuf generated files 
gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep -v '\.pb.go$'| grep '\.go$')

[ -z "$gofiles" ] && exit 0

# Format ALL of the unformatted files automatically
unformatted=$(gofmt -l $gofiles)
echo >&2 "Formatting go files in this commit."
for fn in $unformatted; do
	echo >&2 "formatting $PWD/$fn"
	gofmt -s -w $PWD/$fn
    	git add $PWD/$fn
done

# Move to repo root directory
cd $gitd

#-----------------------------------
# Execute the linters
#-----------------------------------

# Determine if golangci-lint is installed and execute
# it against the directory
which golangci-lint>/dev/null 2>&1
if [ $? -e 0 ]; then
	golangci-lint run
	if [ $? -ne 0 ]; then
        has_error=1
    fi
fi

#-----------------------------------
# Execute the unit tests 
#-----------------------------------
go test -race -cover ./...
if [ $? -ne 0 ]; then
    has_error=1
fi

cd $wd

if [ ${has_error} -ne 0 ]; then
    echo "One or more linter errors. Fix them and try again."
    exit 1 
fi
